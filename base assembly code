ill re format this for the file later, currently messy due to me just copying my assembly build. -will

section .data
    array1 dd 1, 2, 3, 4, 5
    array2 dd 6, 7, 8, 9, 10
    result dd 0, 0, 0, 0, 0

section .text
    global _start

_start:
    ; Set up indices and loop counter
    mov ecx, 5 ; Number of elements in the arrays
    mov esi, 0 ; Index for array1
    mov edi, 0 ; Index for array2
    mov ebx, 0 ; Index for result

    ; Start loop for element-wise addition
compute_loop:
    ; Load elements from array1 and array2
    mov eax, [array1 + esi * 4]
    add eax, [array2 + edi * 4]

    ; Store the result in the result array
    mov [result + ebx * 4], eax

    ; update indices
    inc esi
    inc edi
    inc ebx

    ; Check if we have processed all elements
    loop compute_loop

    ; program end
    mov eax, 1 ; Exit system call code
    xor ebx, ebx ; Exit code 0
    int 0x80 ; Invoke the kernel

section .bss
    ; No uninitialized data in this example
